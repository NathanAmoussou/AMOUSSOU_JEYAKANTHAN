Question 1 : 

Faite dans 'tokens.h'.

Question 2 : 

Faite dans 'regexp.l'.

Question 3 :

Dans le terminal, dans le fichier 'Version_Python' on tape 'flex regexp.l',
ça crée le fichier 'lex.yy.c'.

On tape 'gcc -o lexer lex.yy.c -ll' (sur MacOS '-ll' marche mais pas '-lfl',
sur autres OS utiliser '-lfl'), ça crée le fichier 'lexer'.

On tape ./lexer < test.1, ça retourne

PAR_O
LETTER
PLUS
LETTER
PAR_F
STAR
DOT
LETTER

LETTER
LETTER

LETTER
LETTER
LETTER
LETTER
LETTER
LETTER

LETTER

Question 4 :

Faite dans 'regexp.y'.

Question 5 :

Faite dans 'regexp.y'.

Question 6 :

On tape 'flex regexp.l' ce qui crée le fichier 'lex.yy.c'.
Ensuite on tape 'bison -d regexp.y' ce qui génère 'regexp.tab.c' et 'regexp.tab.h'.
Ensuite on tape 'gcc -o regexp_parser regexp.tab.c lex.yy.c -ly -ll' ce qui retourne :
"""
regexp.tab.c:1244:16: error: implicit declaration of function 'yylex' is invalid in C99
      [-Werror,-Wimplicit-function-declaration]
      yychar = YYLEX;
               ^
regexp.tab.c:600:16: note: expanded from macro 'YYLEX'
# define YYLEX yylex ()
               ^
1 error generated.
"""
On a ajouté la ligne 'int yylex(void);' dans 'regexp.y' et maintenant quand on exécute
'gcc -o regexp_parser regexp.tab.c lex.yy.c -ly -ll', le fichier 'regexp_parser' est créé.
On tape ensuite './regexp_parser < test.1' ce qui retourne :
"""
PAR_O
LETTER
Lettre reconnue.
PLUS
LETTER
Lettre reconnue.
PAR_F
Opérateur PLUS (union) reconnu.
Parenthèses ouvrante et fermante reconnues.
STAR
Opérateur STAR (répétition) reconnu.
DOT
LETTER
Lettre reconnue.

LETTER
Opérateur DOT (concaténation) reconnu.
Erreur de syntaxe : syntax error
"""

Question 7 :

On a fait plusieurs modifications dans 'regexp.y' et 'regexp.l'
pour que le parser reconnaisse les expressions régulières et les mots.

Question 8 :

On a fait plusieurs modifications dans 'regexp.y' et 'regexp.l'
pour que le parser écrive dans main.py le code Python qui permet
de gérérer le fichier qui exécuté, retourna un résultat satisfaisant.
